version: "3.8"
services:
  database:
    image: postgres:15-alpine
    # Load all env vars from .env into the container's environment.
    env_file: .env
    ports:
      - 5433:5432
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./api/src/db/migration.sql:/docker-entrypoint-initdb.d/migration.sql
      - ./api/src/db/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    networks:
      - mynetwork

  api:
    build: ./api
    environment:
      # DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB} ||
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: development
      PORT: 80
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      - database
    ports:
      - ${API_PORT}:80
    volumes:
      # This allows live reload inside a docker container by mapping your
      # filesystem to the container's.
      - ./api/src:/code/src
    command: npm run dev
    networks:
      mynetwork:
        ipv4_address: 10.0.0.4

  app:
    build: ./client
    environment:
      API_URL: http://api:80
      PORT: ${CLIENT_PORT}
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      - api
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    volumes:
      # This allows live reload inside a docker container by mapping your
      # filesystem to the container's.
      - ./client/src:/code/src
    command: npm run dev
    networks:
      mynetwork:
        ipv4_address: 10.0.0.10

  tests:
    build: ./tests
    environment:
      API_URL: http://api
      CLIENT_URL: http://10.0.0.10:${CLIENT_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB}
      NODE_ENV: test
      PORT: ${TESTING_PORT}
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      - database
      - api
      - app
    ports:
      - ${TESTING_PORT}:${TESTING_PORT}
    volumes:
      - ./tests/src:/code/src
    networks:
      - mynetwork

volumes:
  pg-data:

networks:
  mynetwork:
    ipam:
      config:
        - subnet: 10.0.0.0/8
